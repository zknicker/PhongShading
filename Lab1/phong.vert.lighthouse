
// Phone lighting vertex shader. Created using inspiration and code from:
//   * http://www.cse.ohio-state.edu/~hwshen/5542/Site/Slides_files/shading_glsl.pdf
//   * http://www.opengl-tutorial.org/beginners-tutorials/tutorial-8-basic-shading/

layout(location = 0) in vec3 vertex_model;
layout(location = 1) in vec3 normal_model;

out vec3 position_world;
out vec3 normal_camera;
out vec3 eyedir_camera;
out vec3 lightdir_camera;

uniform mat4 ModelViewProjection;
uniform mat4 View;
uniform mat4 Model;
uniform vec3 light_world;

void main(){

	// Vertex position in world space.
	position_world = (Model * vec4(vertex_model, 1)).xyz;
    
	// Vertex position in clip space.
	gl_Position =  ModelViewProjection * vec4(vertex_model, 1);
	
	// Camera space vector from vertex to camera.
	vec3 vertex_camera = (View * Model * vec4(vertex_model, 1)).xyz;
	eyedir_camera = vec3(0,0,0) - vertex_camera;

	// Camera space vector from vertex to light.
	vec3 light_camera = (View * vec4(light_world, 1)).xyz;
	lightdir_camera = light_camera + eyedir_camera;
	
	// Camera space normal vector of the vertex.
	normal_camera = (View * Model * vec4(normal_model,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
}